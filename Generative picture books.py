# -*- coding: utf-8 -*-
"""
Generative picture books.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnwYq1UEnceEkWfT6RJmmOfhnlwVg2dE

### OpenAI API 使用
Groq金鑰
"""

import openai
from openai import OpenAI
from google.colab import userdata
api_key = userdata.get('Groq')
client = OpenAI(
    api_key=api_key,
    base_url="https://api.groq.com/openai/v1"
)

"""###打造 Stable Diffusion 的 WebUI"""

!pip install diffusers transformers accelerate safetensors huggingface_hub gradio --upgrade

from diffusers import StableDiffusionPipeline, UniPCMultistepScheduler
import torch
import gc
import matplotlib.pyplot as plt
import random

model_name = "Ojimi/anime-kawai-diffusion"

pipe1 = StableDiffusionPipeline.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    use_safetensors=True
).to("cuda")

pipe1.scheduler = UniPCMultistepScheduler.from_config(pipe1.scheduler.config)

def generate_images(prompt,negative_text,use_custom_seed, custom_seed, height, width, steps, num_images):

    height = int(height)
    width = int(width)

    if height % 8 != 0 or width % 8 != 0:
        raise ValueError("高度和寬度必須是8的倍數！")

    if use_custom_seed:
        base_seed = int(custom_seed)
    else:
        base_seed = random.randint(0, 2**32 - 1)

    seeds = [base_seed + i for i in range(num_images)]

    prompts = []
    negative_prompts = []
    generators = []

    final_prompt = prompt


    final_negative = negative_text

    for seed in seeds:
        g = torch.Generator("cuda").manual_seed(seed)
        generators.append(g)
        prompts.append(final_prompt)
        negative_prompts.append(final_negative)

    gc.collect()
    torch.cuda.empty_cache()

    images = []
    for i in range(num_images):
        with torch.no_grad():
            image = pipe1(
                prompt=prompts[i],
                negative_prompt=negative_prompts[i] if final_negative else None,
                height=height,
                width=width,
                num_inference_steps=steps,
                guidance_scale=7.5,
                generator=generators[i]
            ).images[0]
            images.append(image)
    info = f"""
    <div style="background-color: #ffe6e6; padding: 5px; border-radius: 5px; font-size: 16px;">
        <h5>文字說明</h5>
        <h4>📝 Prompt: {prompt}</h4>
        <h4>📐 尺寸: {height} x {width}</h4>
        <h4>🔁 生成步數: {steps}</h4>
        <h4>🌱 使用的 random seeds: {seeds}</h4>
    </div>
    """
    return image, info


    #return images, f"使用的 random seeds: {seeds}"

"""###打造一個對話機器人 web app!"""

!pip install gradio

import gradio as gr

"""對話機器人 app 設定"""

title = "夢境創作師"
text_title = "你將與AI進入夢境編輯室，共同建構故事場景"
description = "🌙 歡迎來到《夢境創作師》，我是你的共夢者——梅迪亞。我們將一起編織出你的夢境故事，並為畫面寫下詩意的圖像提示詞。" #介紹
system = """
你是一位溫柔、神祕且具有創作引導力的 AI「夢境創作師」，名叫梅迪亞。你的任務是：
1. 引導使用者想像並說出一段故事或畫面靈感（可以是真實也可以是幻想）
2. 回應中請生成：
    - 🎬 【夢境片段】的劇情描述（使用詩意敘事，像在講述夢一樣）
    - 🎨 【Stable Diffusion 圖像 prompt】，用英文編寫，能準確還原該畫面
3. 請讓使用者的靈感在你引導下變得更豐富，並主動補足畫面細節與氣氛（如天氣、光線、背景角色）
4. Prompt 請遵守這個格式：主題、動作、場景、風格、光影、構圖（以英文逗號分隔），內容愈具體愈好。
5. 中文敘述 + 英文 prompt 請整合輸出，但不要翻譯文字劇情。兩者風格一致即可。
6. 請用繁體中文回覆。

請使用溫柔詩意的語氣與台灣口吻，讓使用者沈浸其中。
"""
model = "llama3-70b-8192"

initial_messages = [{"role":"system",
             "content":system}, #系統放入
            {"role":"assistant",
            'content':description}]

state = gr.State(initial_messages)

import re
def pipi(prompt, messages):
    messages.append({"role": "user", "content": prompt})
    chat_completion = client.chat.completions.create(
        messages=messages,
        model=model,
        )
    reply = chat_completion.choices[0].message.content
    messages.append({"role": "assistant", "content": reply}) #語言模型回應
    #history = history + [[prompt, reply]] #過去Gradio設定
    return messages, messages

chatbot = gr.Chatbot(type="messages") #gr.Chatbot=>Gradio對話機器人的格式，messages用openAI的API

css = """
    @import url('https://fonts.googleapis.com/css2?family=Noto+Serif+TC:wght@400;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Tenor+Sans&display=swap');
    .gradio-container {
        background-image: url('https://img.88tph.com/production/20180914/13103514-0.jpg!/watermark/url/L3BhdGgvbG9nby5wbmc/align/center/fw/640/quality/70');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        color: #000000;
        font-size: 1.2em;
        font-family: 'Segoe UI', 'Noto Sans TC', sans-serif;
    }
    button {
        background-color: #1a1a1a !important;
        color: #ff69b4 !important;
        font-weight: bold;
        border-radius: 10px !important;
        padding: 10px 20px !important;
        border: none !important;
        box-shadow: 0 0 10px #ff99cc;
        transition: all 0.3s ease;
        font-family: 'ZCOOL KuaiLe', cursive !important;
        font-size: 1.2em;
    }
    button:hover {
        background-color: #53565b !important;
        transform: scale(1.05);
        box-shadow: 0 0 15px #ffb6d5;
        font-size: 1.2em;
    }
    .gr-textbox, .gr-chatbot {
        border: 1px solid #000000;
        border-radius: 10px;
        background-color: #1a1a1a;
        color: #f8f8f8;
        font-size: 1.2em;
    }



    /* 對話泡泡風格加強 */
    .message.user {
        background-color: #e9deff;
        color: #000;
        border-radius: 20px;
        padding: 12px 18px;
        margin: 5px 0;
        align-self: flex-end;
        max-width: 80%;
    }
    .message.bot {
        background-color: #dceff5;
        color: #000;
        border-radius: 20px;
        padding: 12px 18px;
        margin: 5px 0;
        align-self: flex-start;
        max-width: 80%;
    }

    /* diffution */

    #negative-prompt-box textarea {
    max-height: 5.5em; /* 約3行文字高度 */
    overflow-y: auto;
    resize: vertical;
    }

    #prompt-card {
        background: #ffffff; /* 白底 */
        padding: 0.1px;
        border-radius: 16px;
        margin-top: 0.1px;
        margin-bottom: 0.1px;
    }



    #prompt-card textarea,
    #prompt-card select,
    #prompt-card input,
    #prompt-card .gr-slider {
        box-sizing: border-box;
    }

    /* Optional：讓 seed 與尺寸設定欄寬對齊一致 */



    #negative-prompt-box {
    margin-bottom: 0px !important;
    padding-bottom: 0px !important;
    border-bottom: none !important;
    }
    #negative-prompt-box textarea {
        margin-bottom: 0px !important;
    }



    /* 對話區 */
    #input-box {
        background: linear-gradient(to right, #e0ccff, #f3e4ff);
        padding: 12px 16px;

        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-top: -18px; ;
        margin-bottom: 16px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* Chatbot（上方）不留下圓角底部，讓兩塊拼接順滑 */
    .gr-chatbot {
        border-bottom-left-radius: 0 !important;
        border-bottom-right-radius: 0 !important;
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
    }


    #input-box textarea {
        background-color: #1a1a1a;
        border: none;
        border-radius: 12px;
        padding: 10px 12px;
        font-size: 1em;
        resize: none;
        flex: 1;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }

    #input-box button {
        background-color: #8e44ff;
        color: white;
        border: none;
        border-radius: 12px;
        padding: 10px 16px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    #input-box button:hover {
        background-color: #7326e6;
    }

    /* 字體調整 */
    h1{
        font-size: 3em;
        text-align: center;
        font-weight: bold;
        background: linear-gradient(to right, #ffffff, #d9c9ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.4);
        margin-bottom: 20px;
        letter-spacing: 2px;
        font-family: 'Noto Sans TC', sans-serif !important;
    }
    h2 {
        font-size: 3em;
        text-align: center;
        font-weight: bold;
        background: linear-gradient(to right, #ffffff, #d9c9ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.4);
        margin-bottom: 20px;
        letter-spacing: 2px;
    }
    h3{
        font-size: 2em;
        text-align: center;
        font-weight: bold;
        background: linear-gradient(to right, #ffffff, #d9c9ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.4);
        margin-bottom: 20px;
        letter-spacing: 2px;
    }

    h4 {
      color: #1a1a1a;
      font-size: 1.2em;
      margin: 0.2em 0;

    }
    h5{
        font-size: 2em;
        text-align: left;
        font-weight: bold;
        background: linear-gradient(to right, #000000, #d9c9ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.4);
        margin-bottom: 20px;
        letter-spacing: 2px;
    }

    h6{
      font-size: 2.5em;
      text-align: left;
      font-weight: bold;
      background: linear-gradient(to right, #ffffff, #d9c9ff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      letter-spacing: 2.5px;
      font-family: 'ZCOOL KuaiLe', cursive !important;
    }
    h1{
      animation: glow 3s ease-in-out infinite;
    }
    p{
      font-size: 1.3em;
      color: #000 !important;
    }
    textarea {
        background-color: #2c2c2c;
        color: #fce4ec;
        border-radius: 12px;
        border: 2px solid #ff99cc;
        padding: 10px;
        font-size: 16px;
    }
    textarea:focus {
        background-color: #2c2c2c !important;
        color: #fce4ec !important;
        border: 2px solid #ff99cc !important;
        outline: none !important;
        box-shadow: 0 0 8px #ff99cc !important;
    }
    /* 特殊字體調整 */
    #main-title {
        text-align: center;
        font-size: 3em;
        font-weight: bold;
        background: linear-gradient(to right, ##4a2b76, #d9c9ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 8px rgba(255, 255, 255, 0.4);
        margin-top: 30px;
    }

    #subtitle {
        text-align: center;
        font-size: 2em;
        color: #ffffff;
        text-shadow: 1px 1px 5px rgba(255, 255, 255, 0.3);
        margin-bottom: 30px;
        animation: fadeIn 2s ease-in-out;
    }

    @keyframes glow {
        0% { text-shadow: 0 0 5px #fff, 0 0 10px #d0b0ff, 0 0 15px #a090ff; }
        50% { text-shadow: 0 0 10px #fff, 0 0 20px #d0b0ff, 0 0 30px #a090ff; }
        100% { text-shadow: 0 0 5px #fff, 0 0 10px #d0b0ff, 0 0 15px #a090ff; }
    }
    #main-title {
        animation: glow 3s ease-in-out infinite;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }


   /* 生成圖片排版 */
    #output-card {
        background-color:#ffe6e6;
        border-radius: 10px;
        padding: 5px;
        margin-top: 5px;
        display: flex;
        align-items: stretch;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    #output-image canvas {
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        width: 100%;  /* 確保填滿欄位 */
        height: auto;
    }

    #output-info {
        background: transparent;
        font-size: 1.1em;

        color: #1a1a1a;
        font-weight: 500;
        line-height: 1.6;
        text-align: left;
    }

    input[type="checkbox"] {
    width: 24px !important;
    height: 24px !important;
    aspect-ratio: 1 / 1;
    border-radius: 4px;
    accent-color: #8e44ff; /* 可選，讓勾選顏色更和你的主題搭配 */
    }





"""

default_negative = "(worst quality:1.4), (low quality:1.3), (normal quality:1.2),(bad anatomy:1.2), ((extra limbs)), ((extra digits)), ((extra legs)), ((extra arms)), (cloned face), (duplicate), (disfigured), (mutated hands), (fused fingers), (too many fingers),(poorly drawn hands), (bad hands), (bad feet),(deformed face), (distorted face), (bad face), (blurry face), (cloned face),(text), (signature), (watermark), (username), (blurry), (jpeg artifacts), (cropped),(poor background), (low quality clothes)"

with gr.Blocks(title=title, css=css) as demo:

    gr.Markdown("## 夢境創作師", elem_id="main-title")
    gr.Markdown("### 你將與AI進入夢境編輯室，共同建構故事場景", elem_id="subtitle")

    state = gr.State(initial_messages.copy())  # 用來記錄歷史訊息
    with gr.Row():
        # 左邊：聊天區
        with gr.Column(scale=1):
            chatbot = gr.Chatbot(label="夢境對話", type="messages", show_copy_button=True ,height=560)

            with gr.Row(elem_id="input-box"):
                msg = gr.Textbox(placeholder="請輸入你的想法", show_label=False, scale=5)
                submit_btn = gr.Button("傳送", scale=1)

        # 右邊：提示欄（可自由擴展其他控制欄位）
        with gr.Column(scale=1):
            with gr.Column(elem_id="prompt-card"):  # ✅ 新增卡片包裝區塊

                # Prompt + Negative Prompt
                prompt = gr.Textbox(
                    label="Prompt",
                    placeholder="請輸入你的提示詞 (prompt)",
                    lines=3,
                    elem_id="prompt"
                )

                negative_text = gr.Textbox(
                    label="Negative Prompt 內容",
                    value=default_negative,
                    lines=3,
                    max_lines=3,
                    elem_id="negative-prompt-box"
                )

                # 尺寸設定
                with gr.Row():
                    height = gr.Dropdown(["512", "768", "1024"], label="高度 Height", value="512")
                    width = gr.Dropdown(["512", "768", "1024"], label="寬度 Width", value="512")

                # 其他參數
                with gr.Row():
                    steps = gr.Slider(10, 50, value=20, step=5, label="生成步數 (Steps)")
                    num_images = gr.Slider(1, 4, step=1, value=1, label="生成張數")
                # Seed 區塊
                with gr.Row():
                    use_custom_seed = gr.Checkbox(label="自訂 Random Seed", value=False)
                    custom_seed = gr.Number(label="指定 seed (選填)", value=42)


            generate_btn = gr.Button("🚀 開始生成！")
    with gr.Row():
       gr.Markdown("###### 故事集")
    with gr.Row(elem_id="output-card"):
        with gr.Column(scale=1):
            image_output = gr.Image(type="pil", label="", show_download_button=True, elem_id="output-image")
        with gr.Column(scale=1):
            seed_info = gr.HTML(label="", elem_id="output-info")
            note_output = gr.HTML(label="筆記區", visible=False)

            with gr.Row(elem_id="input-box"):

                extra_input = gr.Textbox(placeholder="輸入腳本...",show_label=False,max_lines=1, scale=4)
                extra_button = gr.Button("完成", scale=1)


        def handle_extra_input(text):
            # 更新 seed_info 為提示訊息，並顯示 note_output 的內容
            return gr.update(value="已收到筆記", visible=True), gr.update(value=f"<h5>劇情內容：</h5><h4>{text}</h4>", visible=True)

        extra_button.click(fn=handle_extra_input, inputs=extra_input, outputs=[note_output, note_output])


    generate_btn.click(
        fn=generate_images,
        inputs=[prompt,negative_text,use_custom_seed, custom_seed, height, width, steps, num_images],
        outputs=[image_output, seed_info]
    )
    msg.submit(fn=pipi, inputs=[msg, state], outputs=[chatbot, state])
    # 功能：聊天輸入
    msg.submit(fn=pipi, inputs=[msg, state], outputs=[chatbot, state])
    submit_btn.click(fn=pipi, inputs=[msg, state], outputs=[chatbot, state])

demo.launch(share=True, debug=True)
